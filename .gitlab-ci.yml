workflow:
  rules:
    # Disable merge request pipelines
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - when: always

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GH_PROJECT_PATH: "MatrixAI/${CI_PROJECT_NAME}"
  GH_PROJECT_URL: "https://${GITHUB_TOKEN}@github.com/${GH_PROJECT_PATH}.git"
  # Cache .npm
  npm_config_cache: "${CI_PROJECT_DIR}/tmp/npm"
  # Prefer offline node module installation
  npm_config_prefer_offline: "true"
  # Homebrew cache only used by macos runner
  HOMEBREW_CACHE: "${CI_PROJECT_DIR}/tmp/Homebrew"

default:
  image: registry.gitlab.com/matrixai/engineering/maintenance/gitlab-runner
  interruptible: true
  before_script:
    # Replace this in windows runners that use powershell
    # with `mkdir -Force "$CI_PROJECT_DIR/tmp"`
    - mkdir -p "$CI_PROJECT_DIR/tmp"

# Cached directories shared between jobs & pipelines per-branch per-runner
cache:
  key: $CI_COMMIT_REF_SLUG
  # Preserve cache even if job fails
  when: 'always'
  paths:
    - ./tmp/npm/
    # Homebrew cache is only used by the macos runner
    - ./tmp/Homebrew
    # Chocolatey cache is only used by the windows runner
    - ./tmp/chocolatey/
    # `jest` cache is configured in jest.config.js
    - ./tmp/jest/

stages:
  - check       # Linting, unit tests
  - build       # Cross-platform library compilation, unit tests
  - integration # Cross-platform application bundling, integration tests, and pre-release
  - release     # Cross-platform distribution and deployment

check:lint:
  stage: check
  needs: []
  script:
    - >
      nix develop .#ci --command bash -c $'
      npm run lint;
      npm run lint-shell;
      '
  rules:
    # Runs on feature and staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^(?:feature.*|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != 'master' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

check:nix-dry:
  stage: check
  needs: []
  script:
    - >
      nix build .#docker --dry-run
  rules:
    # Runs on feature and staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^(?:feature.*|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != 'master' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

check:test-generate:
  stage: check
  needs: []
  script:
    - >
      nix develop .#ci --command bash -c $'
      ./scripts/check-test-generate.sh > ./tmp/check-test.yml;
      '
  artifacts:
    when: always
    paths:
      - ./tmp/check-test.yml
  rules:
    # Runs on feature commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^feature.*$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and staging and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH !~ /^(?:master|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

check:test:
  stage: check
  needs:
    - check:test-generate
  trigger:
    include:
      - artifact: tmp/check-test.yml
        job: check:test-generate
    strategy: depend
  inherit:
    variables: false
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  rules:
    # Runs on feature commits and ignores version commits
    - if: $CI_COMMIT_BRANCH =~ /^feature.*$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Manually run on commits other than master and staging and ignore version commits
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH !~ /^(?:master|staging)$/ && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
      when: manual

build:merge:
  stage: build
  needs: []
  allow_failure: true
  script:
    # Required for `gh pr create`
    - git remote add upstream "$GH_PROJECT_URL"
    - >
      nix develop .#ci --command bash -c $'
      gh pr create \
        --head staging \
        --base master \
        --title "ci: merge staging to master" \
        --body "This is an automatic PR generated by the pipeline CI/CD. This will be automatically fast-forward merged if successful." \
        --assignee "@me" \
        --no-maintainer-edit \
        --repo "$GH_PROJECT_PATH" || true;
      printf "Pipeline Attempt on ${CI_PIPELINE_ID} for ${CI_COMMIT_SHA}\n\n${CI_PIPELINE_URL}" \
      | gh pr comment staging \
        --body-file - \
        --repo "$GH_PROJECT_PATH";
      '
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:dist:
  stage: build
  needs: []
  script:
    - >
      nix develop .#ci --command bash -c $'
      npm run build --verbose;
      '
  artifacts:
    when: always
    paths:
      - ./dist
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:platforms-generate:
  stage: build
  needs: []
  script:
    - >
      nix develop .#ci --command bash -c $'
      ./scripts/build-platforms-generate.sh > ./tmp/build-platforms.yml;
      '
  artifacts:
    when: always
    paths:
      - ./tmp/build-platforms.yml
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:platforms:
  stage: build
  needs:
    - build:platforms-generate
  trigger:
    include:
      - artifact: tmp/build-platforms.yml
        job: build:platforms-generate
    strategy: depend
  inherit:
    variables: false
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

build:prerelease:
  stage: build
  needs:
    - build:dist
    - build:platforms
  # Don't interrupt publishing job
  interruptible: false
  script:
    - echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ./.npmrc
    - echo 'Publishing library prerelease'
    - >
      nix develop .#ci --command bash -c $'
      npm publish --tag prerelease --access public;
      '
  after_script:
    - rm -f ./.npmrc
  rules:
    # Only runs on tag pipeline where the tag is a prerelease version
    # This requires dependencies to also run on tag pipeline
    # However version tag comes with a version commit
    # Dependencies must not run on the version commit
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+-.*[0-9]+$/

integration:builds:
  stage: integration
  needs:
    - build:dist
    - build:platforms
  script:
    - mkdir -p ./builds
    - >
      build_application="$(nix build \
        --max-jobs "$(nproc)" \
        --cores "$(nproc)" \
        --print-out-paths \
        .# \
      )";
      nix-store --export $( \
        nix-store --query --requisites "$build_application" \
      ) | gzip > ./builds/polykey-cli.closure.gz;
      builds="$(nix build \
        --max-jobs "$(nproc)" \
        --cores "$(nproc)" \
        --print-out-paths \
        --print-build-logs \
        .# \
        .#docker \
        .#packages.x86_64-linux.executable \
      )";
      cp -r $(echo $builds | tr '\n' ' ') ./builds/;
      nix develop .#ci --command bash -c $'
        npm run build
      '
  artifacts:
    paths:
      - ./builds/
      - ./dist/
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:deployment:
  stage: integration
  needs:
    - integration:builds
  # Don't interrupt deploying job
  interruptible: false
  # Requires mutual exclusion
  resource_group: integration:deployment
  environment:
    name: 'testnet'
    deployment_tier: 'staging'
    url: 'https://testnet.polykey.com'
  variables:
    REGISTRY_AUTH_FILE: "./tmp/registry-auth-file.json"
    # Override CI_REGISTRY_IMAGE to point to ECR
    CI_REGISTRY_IMAGE: '015248367786.dkr.ecr.ap-southeast-2.amazonaws.com/polykey'
  script:
    - echo 'Deploying container image to ECR'
    - >
      nix develop .#ci --command bash -c $'
      aws ecr get-login-password \
        | skopeo login \
        --username AWS \
        --password-stdin \
        --authfile "$REGISTRY_AUTH_FILE" \
        "$CI_REGISTRY_IMAGE";
      image=(./builds/*-docker-*);
      ./scripts/deploy-image.sh "${image[0]}" \'testnet\' "$CI_REGISTRY_IMAGE";
      '
    - echo 'Waiting for Testnet Deployment'
    - >
      nix develop .#ci --command bash -c $'
      ./scripts/wait-for-deploy.js testnet.polykey.com;
      '
  after_script:
    - rm -f "$REGISTRY_AUTH_FILE"
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:nix:
  stage: integration
  needs:
    - integration:builds
    - job: integration:deployment
      optional: true
  script:
    - >
      build_application="$( \
        gunzip -c ./builds/polykey-cli.closure.gz | \
        nix-store --import | \
        tail -1 \
      )"
    - $build_application/bin/polykey
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:docker:
  stage: integration
  needs:
    - integration:builds
    - job: integration:deployment
      optional: true
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    FF_NETWORK_PER_BUILD: "true"
    PK_TEST_TMPDIR: "${CI_PROJECT_DIR}/tmp/test"
    PK_NETWORK: "testnet"
  script:
    - docker info
    - mkdir $PK_TEST_TMPDIR
    - >
      nix develop .#ci --command bash -c $'
      image_and_tag="$(docker load --input ./builds/*docker* | cut -d\' \' -f3)";
      docker tag "$image_and_tag" "polykey-cli:testtarget";
      npm run test tests/integration/docker;
      '
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:linux:
  stage: integration
  needs:
    - integration:builds
    - job: integration:deployment
      optional: true
  image: ubuntu:latest
  script:
    - for f in ./builds/*-linux-*; do "$f"; done
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:windows:
  inherit:
    default:
      - interruptible
  stage: integration
  needs:
    - integration:builds
    - job: integration:deployment
      optional: true
  tags:
    - windows
  before_script:
    - mkdir -Force "$CI_PROJECT_DIR/tmp"
    - Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
  script:
    - .\scripts\choco-install.ps1
    - refreshenv
    - npm ci --ignore-scripts
    - $env:Path = "$(npm root)\.bin;" + $env:Path
    - >
      $env:version = $(node -p "require('./package.json').version");
      npm run pkg -- `
        --output=builds\polykey-cli-$env:version-win32-x64 `
        --bin=dist\polykey.js `
        --node-version=20 `
        --platform=win32 `
        --arch=x64
    - Get-ChildItem -File ./builds/*-win32-* | ForEach {& $_.FullName}
  artifacts:
    paths:
      - ./builds/
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:macos:
  stage: integration
  needs:
    - integration:builds
    - job: integration:deployment
      optional: true
  tags:
    - saas-macos-medium-m1
  image: macos-12-xcode-14
  script:
    - >
      version=$(node -p "require('./package.json').version");
      npm ci;
      npm run pkg -- \
        --output=builds/polykey-cli-$version-darwin-universal \
        --bin=dist/polykey.js \
        --node-version=20 \
        --platform=darwin \
        --arch=arm64
    - for f in ./builds/*-darwin-universal*; do "$f"; done
  artifacts:
    paths:
      - ./builds/
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

integration:prerelease:
  stage: integration
  needs:
    - integration:builds
    - job: build:prerelease
      optional: true
    - job: integration:nix
      optional: true
    - job: integration:docker
      optional: true
    - job: integration:linux
      optional: true
    - job: integration:windows
      optional: true
    - job: integration:macos
      optional: true
  # Don't interrupt publishing job
  interruptible: false
  # Requires mutual exclusion
  resource_group: integration:prerelease
  variables:
    REGISTRY_AUTH_FILE: "./tmp/registry-auth-file.json"
  script:
    - echo 'Publishing application prerelease'
    - >
      nix develop .#ci --command bash -c $'
      if gh release view "$CI_COMMIT_TAG" --repo "$GH_PROJECT_PATH" >/dev/null; then \
        gh release \
          upload "$CI_COMMIT_TAG" \
          builds/*.closure.gz \
          builds/*-docker-* \
          builds/*-linux-* \
          builds/*-win32-* \
          builds/*-darwin-* \
          --clobber \
          --repo "$GH_PROJECT_PATH"; \
      else \
        gh release \
          create "$CI_COMMIT_TAG" \
          builds/*.closure.gz \
          builds/*-docker-* \
          builds/*-linux-* \
          builds/*-win32-* \
          builds/*-darwin-* \
          --title "${CI_COMMIT_TAG}-$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
          --notes "" \
          --prerelease \
          --target staging \
          --repo "$GH_PROJECT_PATH"; \
      fi;
      '
    - echo 'Prereleasing container image'
    - >
      nix develop .#ci --command bash -c $'
      skopeo login \
        --username "$CI_REGISTRY_USER" \
        --password "$CI_REGISTRY_PASSWORD" \
        --authfile "$REGISTRY_AUTH_FILE" \
        "$CI_REGISTRY_IMAGE";
      image=(./builds/*-docker-*);
      ./scripts/deploy-image.sh "${image[0]}" \'testnet\' "$CI_REGISTRY_IMAGE";
      '
  after_script:
    - rm -f "$REGISTRY_AUTH_FILE"
  rules:
    # Only runs on tag pipeline where the tag is a prerelease version
    # This requires dependencies to also run on tag pipeline
    # However version tag comes with a version commit
    # Dependencies must not run on the version commit
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+-.*[0-9]+$/

integration:merge:
  stage: integration
  needs:
    - build:merge
    - job: build:platforms
      optional: true
    - job: integration:nix
      optional: true
    - job: integration:docker
      optional: true
    - job: integration:linux
      optional: true
    - job: integration:windows
      optional: true
    - job: integration:macos
      optional: true
  # Requires mutual exclusion
  resource_group: integration:merge
  allow_failure: true
  variables:
    # Ensure that CI/CD is fetching all commits
    # this is necessary to checkout origin/master
    # and to also merge origin/staging
    GIT_DEPTH: 0
  script:
    - >
      nix develop .#ci --command bash -c $'
      printf "Pipeline Succeeded on ${CI_PIPELINE_ID} for ${CI_COMMIT_SHA}\n\n${CI_PIPELINE_URL}" \
      | gh pr comment staging \
        --body-file - \
        --repo "$GH_PROJECT_PATH";
      '
    - git remote add upstream "$GH_PROJECT_URL"
    - git checkout origin/master
    # Merge up to the current commit (not the latest commit)
    - git merge --ff-only "$CI_COMMIT_SHA"
    - git push upstream HEAD:master
  rules:
    # Runs on staging commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'staging' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/
    # Runs on tag pipeline where the tag is a prerelease or release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

release:deployment:branch:
  stage: release
  # Only needs integration:builds from the staging branch pipeline
  needs:
    - project: $CI_PROJECT_PATH
      job: integration:builds
      ref: staging
      artifacts: true
  # Don't interrupt deploying job
  interruptible: false
  # Requires mutual exclusion (also with release:deployment:tag)
  resource_group: release:deployment
  environment:
    name: 'mainnet'
    deployment_tier: 'production'
    url: 'https://mainnet.polykey.com'
  variables:
    REGISTRY_AUTH_FILE: "./tmp/registry-auth-file.json"
    # Override CI_REGISTRY_IMAGE to point to ECR
    CI_REGISTRY_IMAGE: '015248367786.dkr.ecr.ap-southeast-2.amazonaws.com/polykey'
  script:
    - echo 'Deploying container image to ECR'
    - >
      nix develop .#ci --command bash -c $'
      aws ecr get-login-password \
        | skopeo login \
        --username AWS \
        --password-stdin \
        --authfile "$REGISTRY_AUTH_FILE" \
        "$CI_REGISTRY_IMAGE";
      image=(./builds/*-docker-*);
      ./scripts/deploy-image.sh "${image[0]}" \'mainnet\' "$CI_REGISTRY_IMAGE";
      '
    - echo 'Waiting for Mainnet Deployment'
    - >
      nix develop .#ci --command bash -c $'
      ./scripts/wait-for-deploy.js mainnet.polykey.com;
      '
  after_script:
    - rm -f "$REGISTRY_AUTH_FILE"
  rules:
    # Runs on master commits and ignores version commits
    - if: $CI_COMMIT_BRANCH == 'master' && $CI_COMMIT_TITLE !~ /^[0-9]+\.[0-9]+\.[0-9]+(?:-.*[0-9]+)?$/

release:deployment:tag:
  stage: release
  # Tag pipelines run independently
  needs:
    - integration:builds
    - integration:merge
  # Don't interrupt deploying job
  interruptible: false
  # Requires mutual exclusion (also with release:deployment:branch)
  resource_group: release:deployment
  environment:
    name: 'mainnet'
    deployment_tier: 'production'
    url: 'https://mainnet.polykey.com'
  variables:
    REGISTRY_AUTH_FILE: "./tmp/registry-auth-file.json"
    # Override CI_REGISTRY_IMAGE to point to ECR
    CI_REGISTRY_IMAGE: '015248367786.dkr.ecr.ap-southeast-2.amazonaws.com/polykey'
  script:
    - echo 'Deploying container image to ECR'
    - >
      nix develop .#ci --command bash -c $'
      aws ecr get-login-password \
        | skopeo login \
        --username AWS \
        --password-stdin \
        --authfile "$REGISTRY_AUTH_FILE" \
        "$CI_REGISTRY_IMAGE";
      image=(./builds/*-docker-*);
      ./scripts/deploy-image.sh "${image[0]}" \'mainnet\' "$CI_REGISTRY_IMAGE";
      '
    - echo 'Waiting for Mainnet Deployment'
    - >
      nix develop .#ci --command bash -c $'
      ./scripts/wait-for-deploy.js mainnet.polykey.com;
      '
  after_script:
    - rm -f "$REGISTRY_AUTH_FILE"
  rules:
    # Runs on tag pipeline where the tag is a release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/

release:docker:
  stage: release
  needs:
    - integration:builds
    - job: release:deployment:tag
      optional: true
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    FF_NETWORK_PER_BUILD: "true"
    PK_TEST_TMPDIR: "${CI_PROJECT_DIR}/tmp/test"
    PK_NETWORK: "mainnet"
  script:
    - docker info
    - mkdir $PK_TEST_TMPDIR
    - >
      nix develop .#ci --command bash -c $'
      image_and_tag="$(docker load --input ./builds/*docker* | cut -d\' \' -f3)";
      docker tag "$image_and_tag" "polykey-cli:testtarget";
      npm run test tests/integration/docker;
      '
  rules:
    # Runs on tag pipeline where the tag is a release version
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/

release:distribution:
  stage: release
  needs:
    - build:dist
    - build:platforms
    - integration:builds
    - integration:merge
    - release:deployment:tag
    - release:docker
    - job: integration:windows
      optional: true
    - job: integration:macos
      optional: true
  # Don't interrupt publishing job
  interruptible: false
  # Requires mutual exclusion
  resource_group: release:distribution
  variables:
    REGISTRY_AUTH_FILE: "./tmp/registry-auth-file.json"
  script:
    - echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ./.npmrc
    - echo 'Publishing library'
    - >
      nix develop .#ci --command bash -c $'
      npm publish --access public;
      '
    - echo 'Releasing application builds'
    - >
      nix develop .#ci --command bash -c $'
      gh release \
        create "$CI_COMMIT_TAG" \
        builds/*.closure.gz \
        builds/*-docker-* \
        builds/*-linux-* \
        builds/*-win32-* \
        builds/*-darwin-* \
        --title "${CI_COMMIT_TAG}-$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
        --notes "" \
        --target master \
        --repo "$GH_PROJECT_PATH";
      '
    - echo 'Releasing container image'
    - >
      nix develop .#ci --command bash -c $'
      skopeo login \
        --username "$CI_REGISTRY_USER" \
        --password "$CI_REGISTRY_PASSWORD" \
        --authfile "$REGISTRY_AUTH_FILE" \
        "$CI_REGISTRY_IMAGE";
      image=(./builds/*-docker-*);
      ./scripts/deploy-image.sh "${image[0]}" \'mainnet\' "$CI_REGISTRY_IMAGE";
      '
  after_script:
    - rm -f ./.npmrc
    - rm -f "$REGISTRY_AUTH_FILE"
  rules:
    # Only runs on tag pipeline where the tag is a release version
    # This requires dependencies to also run on tag pipeline
    # However version tag comes with a version commit
    # Dependencies must not run on the version commit
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
